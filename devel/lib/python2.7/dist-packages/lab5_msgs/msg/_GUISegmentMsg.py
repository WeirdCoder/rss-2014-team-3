"""autogenerated by genpy from lab5_msgs/GUISegmentMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lab5_msgs.msg

class GUISegmentMsg(genpy.Message):
  _md5sum = "0c882de09f5b3bc620b839f4d58554ba"
  _type = "lab5_msgs/GUISegmentMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 startX
float64 endX
float64 startY
float64 endY
ColorMsg color
================================================================================
MSG: lab5_msgs/ColorMsg
int64 r
int64 g
int64 b
"""
  __slots__ = ['startX','endX','startY','endY','color']
  _slot_types = ['float64','float64','float64','float64','lab5_msgs/ColorMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       startX,endX,startY,endY,color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GUISegmentMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.startX is None:
        self.startX = 0.
      if self.endX is None:
        self.endX = 0.
      if self.startY is None:
        self.startY = 0.
      if self.endY is None:
        self.endY = 0.
      if self.color is None:
        self.color = lab5_msgs.msg.ColorMsg()
    else:
      self.startX = 0.
      self.endX = 0.
      self.startY = 0.
      self.endY = 0.
      self.color = lab5_msgs.msg.ColorMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d3q.pack(_x.startX, _x.endX, _x.startY, _x.endY, _x.color.r, _x.color.g, _x.color.b))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.color is None:
        self.color = lab5_msgs.msg.ColorMsg()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.startX, _x.endX, _x.startY, _x.endY, _x.color.r, _x.color.g, _x.color.b,) = _struct_4d3q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d3q.pack(_x.startX, _x.endX, _x.startY, _x.endY, _x.color.r, _x.color.g, _x.color.b))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.color is None:
        self.color = lab5_msgs.msg.ColorMsg()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.startX, _x.endX, _x.startY, _x.endY, _x.color.r, _x.color.g, _x.color.b,) = _struct_4d3q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d3q = struct.Struct("<4d3q")
